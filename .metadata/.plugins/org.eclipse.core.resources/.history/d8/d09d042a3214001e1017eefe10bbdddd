package fdmgroup;

/**
 * The Index class represents an index price calculated based on the prices of different tickers.
 * It tracks the open price, close price, highest price, and lowest price of the index.
 * @author Filip
 *
 */
public class Index {

	private final double ABC = 0.1;
	private final double MEGA = 0.3;
	private final double NGL = 0.4;
	private final double TRX = 0.2;

	private static double lastABCPrice;
	private static double lastMEGAPrice;
	private static double lastNGLPrice;
	private static double lastTRXPrice;

	private double openPrice;
	private double closePrice;
	private double highestPrice;
	private double lowestPrice;

	private String ticker;

	/**
	 * Constructs an Index object with the specified ticker.
	 *
	 * @param ticker The ticker symbol associated with the index
	 */
	public Index(String ticker) {
		super();
		this.ticker = ticker; 
	}

	/**
	 * Updates the index values with the latest price for a specific ticker.
	 *
	 * @param ticker The ticker symbol
	 * @param price  The price of the ticker
	 */
	public void update(String ticker, double price) {

		if (ticker.equals("ABC")) {
			lastABCPrice = price;
		} else if (ticker.equals("MEGA")) {
			lastMEGAPrice = price;
		} else if (ticker.equals("NGL")) {
			lastNGLPrice = price;
		} else {
			lastTRXPrice = price;
		}

//		Index calculation is possible only after all market prices are available on the first traded day
		if (lastABCPrice != 0 && lastMEGAPrice != 0 && lastNGLPrice != 0 && lastTRXPrice != 0) {
			double currentPrice = ABC * lastABCPrice + MEGA * lastMEGAPrice + NGL * lastNGLPrice + TRX * lastTRXPrice;

			if (this.openPrice == 0) {
				this.openPrice = currentPrice;
			}

			this.closePrice = currentPrice;

			if (this.highestPrice == 0 || this.highestPrice < currentPrice) {
				this.highestPrice = currentPrice;
			}

			if (this.lowestPrice == 0 || this.lowestPrice > currentPrice) {
				this.lowestPrice = currentPrice;
			}

		}

	}

	public double getOpenPrice() {
		return openPrice;
	}

	public double getClosePrice() {
		return closePrice;
	}

	public double getHighestPrice() {
		return highestPrice;
	}

	public double getLowestPrice() {
		return lowestPrice;
	}

	public String getTicker() {
		return ticker;
	}

	@Override
	public String toString() {
		return "Index [openPrice=" + openPrice + ", closePrice=" + closePrice + ", highestPrice=" + highestPrice
				+ ", lowestPrice=" + lowestPrice + ", ticker=" + ticker + "]";
	}
	
	

}
