package fdmgroup;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DailyAggregateCalculator {
	
	public static Map<LocalDate, Map<String, DailyAggregate>> calculateDailyAggregates (List<Trade> trades){
		
//		Map<String, DailyAggregate> dailyAggregates = new HashMap<>();
		Map<LocalDate, Map<String, DailyAggregate>> dailyAggregates = new HashMap<>();
		
		for (Trade trade : trades) {
			LocalDate date = trade.getDate();
			String ticker = trade.getTicker();
			
			Map<String, DailyAggregate> aggregatesByTicker = dailyAggregates.get(date);
			if (aggregatesByTicker == null) {
				aggregatesByTicker = new HashMap<>();
				dailyAggregates.put(date, aggregatesByTicker);
			}
			
			DailyAggregate aggregate = aggregatesByTicker.getOrDefault(ticker, new DailyAggregate(ticker));
			
			if (aggregate.getOpenPrice() == 0) {
				aggregate.setOpenPrice(trade.getPrice());
			}
			
			aggregate.setClosePrice(trade.getPrice());
			
			if (aggregate.getHighestPrice() == 0 || trade.getPrice() > aggregate.getHighestPrice()) {
				aggregate.setHighestPrice(trade.getPrice());
			}
			
			if (aggregate.getLowestPrice() == 0 || trade.getPrice() < aggregate.getLowestPrice()) {
				aggregate.setLowestPrice(trade.getPrice());
			}
			
			aggregate.setDailyVolume(aggregate.getDailyVolume() + (trade.getPrice() * trade.getTradeQuantity()));
			
			aggregatesByTicker.put(ticker, aggregate);
		}
		
		return dailyAggregates;
	}

}
